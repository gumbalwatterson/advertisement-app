{
	"info": {
		"_postman_id": "517814ba-2fca-47c3-b296-90e92ba98bba",
		"name": "Advertisement-Collection",
		"description": "Collection for making test request to advertisement-api.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27285750"
	},
	"item": [
		{
			"name": "Quick start",
			"item": [
				{
					"name": "Post with no text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return error message\", function () {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.status).to.eql(400);\r",
									"    pm.expect(res.message).to.eql(\"Must provide announcement text\");\r",
									"});\r",
									"\r",
									"pm.execution.setNextRequest(\"Post annoucement\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/an/announcement",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"an",
								"announcement"
							]
						},
						"description": "Here we are sending post request which has no text for the announcement which should cause error message in response."
					},
					"response": []
				},
				{
					"name": "Post annoucement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Should return announcement\", function () {",
									"    const res = pm.response.json();",
									"    pm.expect(res.text).to.eql(\"anntest\");",
									"    pm.expect(res.viewNum).to.eql(0);",
									"    pm.expect(res.publication).to.not.null;",
									"",
									"    pm.collectionVariables.set(\"annId\", res.id);",
									"    ",
									"});",
									"",
									"pm.execution.setNextRequest(\"Get annoucement\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"anntest\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/an/announcement",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"an",
								"announcement"
							]
						},
						"description": "Here we are making correct post request adding new announcement to the database. In response we should get persistet object."
					},
					"response": []
				},
				{
					"name": "Get annoucement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should return announcement\", function () {",
									"    pm.expect(pm.response.json().text).to.eql(\"anntest\");",
									"    pm.expect(pm.response.json().viewNum).to.eql(1);",
									"    pm.expect(pm.response.json().publication).to.not.null;",
									"    ",
									"});",
									"",
									"pm.execution.setNextRequest(\"Get same annoucement\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/an/announcement/{{annId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"an",
								"announcement",
								"{{annId}}"
							]
						},
						"description": "We are getting announcement by its id. Its id is known after persisting data into the database."
					},
					"response": []
				},
				{
					"name": "Get same annoucement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should return announcement\", function () {",
									"    pm.expect(pm.response.json().text).to.eql(\"anntest\");",
									"    pm.expect(pm.response.json().viewNum).to.eql(2);",
									"    pm.expect(pm.response.json().publication).to.not.null;",
									"});",
									"",
									"pm.execution.setNextRequest(\"Update annoucement\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/an/announcement/{{annId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"an",
								"announcement",
								"{{annId}}"
							]
						},
						"description": "Here we are doing same get request to check if view count number increased."
					},
					"response": []
				},
				{
					"name": "Update annoucement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.execution.setNextRequest(\"Get updated annoucement\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"newAnnTest\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/an/announcement/{{annId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"an",
								"announcement",
								"{{annId}}"
							]
						},
						"description": "Here we are updating previous announcement using its id, saved into collection variable."
					},
					"response": []
				},
				{
					"name": "Get updated annoucement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return updated announcement with reset view count\", function () {\r",
									"    pm.expect(pm.response.json().text).to.eql(\"newAnnTest\");\r",
									"    pm.expect(pm.response.json().viewNum).to.eql(1);\r",
									"    pm.expect(pm.response.json().publication).to.not.null;\r",
									"});\r",
									"\r",
									"pm.execution.setNextRequest(\"Delete updated annoucement\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/an/announcement/{{annId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"an",
								"announcement",
								"{{annId}}"
							]
						},
						"description": "We are getting updated announcement to check is view counter reset or not."
					},
					"response": []
				},
				{
					"name": "Delete updated annoucement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.execution.setNextRequest(\"Get non exist annoucement\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/an/announcement/{{annId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"an",
								"announcement",
								"{{annId}}"
							]
						},
						"description": "We are doing deletion of previous announcement."
					},
					"response": []
				},
				{
					"name": "Get non exist annoucement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return error message\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(404);\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Could not find announcement\"); \r",
									"});\r",
									"\r",
									"pm.execution.setNextRequest(\"Get with string for id\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/an/announcement/{{annId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"an",
								"announcement",
								"{{annId}}"
							]
						},
						"description": "Here we are doing check for failure in case announcement we are requesting does not exists. We should get in response error message with status code and information for the problem reason."
					},
					"response": []
				},
				{
					"name": "Get with string for id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return error message\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(400);\r",
									"    pm.expect(pm.response.json().message).to.eql(\"typeMismatch\"); \r",
									"});\r",
									"\r",
									"pm.execution.setNextRequest(\"Get with id less than 1\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/an/announcement/justAString",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"an",
								"announcement",
								"justAString"
							]
						},
						"description": "Another test for failure passing string instead of integer."
					},
					"response": []
				},
				{
					"name": "Get with id less than 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return error message\", function () {\r",
									"    pm.expect(pm.response.json().status).to.eql(400);\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Must be greater than 0\"); \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/an/announcement/0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"an",
								"announcement",
								"0"
							]
						},
						"description": "Here we are passing number less than 1 to get error messsage in response."
					},
					"response": []
				}
			],
			"description": "Below requests are in the proper order to test each endpoint of the advertisement-api. Short description under each test request describe its purpose."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://localhost:8080",
			"type": "default"
		},
		{
			"key": "annId",
			"value": "1"
		}
	]
}